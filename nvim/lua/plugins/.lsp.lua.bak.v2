---@diagnostic disable: missing-fields
return {
  -- 1) LSP Servers
  {
    "neovim/nvim-lspconfig",
    event = { "BufReadPre", "BufNewFile" },
    -- If you're using LazyVim, these opts will be merged with LazyVimâ€™s defaults
    opts = {
      diagnostics = {
        virtual_text = { prefix = "icons" },
      },
      capabilities = {
        workspace = {
          didChangeWatchedFiles = {
            dynamicRegistration = false,
          },
        },
      },
      ---@type lspconfig.options
      servers = {
        -- Lua
        lua_ls = {
          settings = {
            Lua = {
              hover = { expandAlias = false },
              type = {
                castNumberToInteger = true,
                inferParamType = true,
              },
              diagnostics = {
                disable = { "incomplete-signature-doc", "trailing-space" },
                groupSeverity = {
                  strong = "Warning",
                  strict = "Warning",
                },
                groupFileStatus = {
                  ["ambiguity"] = "Opened",
                  ["await"] = "Opened",
                  ["codestyle"] = "None",
                  ["duplicate"] = "Opened",
                  ["global"] = "Opened",
                  ["luadoc"] = "Opened",
                  ["redefined"] = "Opened",
                  ["strict"] = "Opened",
                  ["strong"] = "Opened",
                  ["type-check"] = "Opened",
                  ["unbalanced"] = "Opened",
                  ["unused"] = "Opened",
                },
                unusedLocalExclude = { "_*" },
              },
            },
          },
        },

        -- TypeScript / JavaScript
        tsserver = {
          -- Add advanced settings if needed
        },

        -- Angular
        angularls = {
          -- root_dir = function(fname)
          --   return require("lspconfig.util").root_pattern("angular.json")(fname)
          -- end,
        },
      },
    },
  },

  -- 2) Conform for Formatting
  {
    "stevearc/conform.nvim",
    optional = true,
    event = { "BufReadPre", "BufNewFile" },
    opts = {
      formatters_by_ft = {
        ["javascript"]       = { "dprint", "prettierd", "prettier" },
        ["javascriptreact"]  = { "dprint", "prettierd", "prettier" },
        ["typescript"]       = { "dprint", "prettierd", "prettier" },
        ["typescriptreact"]  = { "dprint", "prettierd", "prettier" },
        ["html"]             = { "prettierd", "prettier" },
      },
      formatters = {
        dprint = {
          condition = function(_, ctx)
            return vim.fs.find({ "dprint.json" }, { path = ctx.filename, upward = true })[1]
          end,
        },
        prettierd = {
          -- runs the `prettierd` daemon if installed
        },
        prettier = {
          -- runs the CLI version of prettier
          condition = function(_, ctx)
            return vim.fs.find({
              ".prettierrc",
              ".prettierrc.js",
              ".prettierrc.cjs",
              ".prettierrc.json",
              ".prettierrc.yml",
              ".prettierrc.yaml",
              "prettier.config.js",
              "prettier.config.cjs",
              "package.json",
            }, { path = ctx.filename, upward = true })[1]
          end,
        },
      },
    },
  },

  -- 3) nvim-lint for Linting
  {
    "mfussenegger/nvim-lint",
    event = { "BufReadPre", "BufNewFile" },
    -- nvim-lint does *not* have a `.setup()` method, so we must use a config function
    opts = {
      linters_by_ft = {
        lua             = { "selene", "luacheck" },
        javascript      = { "eslint_d" },
        javascriptreact = { "eslint_d" },
        typescript      = { "eslint_d" },
        typescriptreact = { "eslint_d" },
        html            = {}, -- or Angular-specific if you have one
      },
      linters = {
        selene = {
          condition = function(ctx)
            local root = LazyVim and LazyVim.root.get({ normalize = true }) or vim.fn.getcwd()
            if root ~= vim.uv.cwd() then
              return false
            end
            return vim.fs.find({ "selene.toml" }, { path = root, upward = true })[1]
          end,
        },
        luacheck = {
          condition = function(ctx)
            local root = LazyVim and LazyVim.root.get({ normalize = true }) or vim.fn.getcwd()
            if root ~= vim.uv.cwd() then
              return false
            end
            return vim.fs.find({ ".luacheckrc" }, { path = root, upward = true })[1]
          end,
        },
        eslint_d = {
          cmd = "eslint_d",
          args = { "--stdin", "--stdin-filename", "$FILENAME" },
          sourceName = "eslint_d",
          parseJson = {
            errorsRoot = "[0].messages",
            line = "line",
            column = "column",
            endLine = "endLine",
            endColumn = "endColumn",
            message = "${message} [${ruleId}]",
            security = "severity",
          },
          securities = {
            [1] = "warning",
            [2] = "error",
          },
          condition = function(ctx)
            local root = LazyVim and LazyVim.root.get({ normalize = true }) or vim.fn.getcwd()
            if root ~= vim.uv.cwd() then
              return false
            end
            return vim.fs.find({
              ".eslintrc",
              ".eslintrc.js",
              ".eslintrc.cjs",
              ".eslintrc.json",
              "package.json",
            }, { path = root, upward = true })[1]
          end,
        },
      },
    },
    config = function(_, opts)
      local lint = require("lint")
      -- Apply your linters, etc.
      if opts.linters_by_ft then
        lint.linters_by_ft = opts.linters_by_ft
      end
      if opts.linters then
        for linter_name, linter_config in pairs(opts.linters) do
          lint.linters[linter_name] = linter_config
        end
      end

      -- (Optional) Auto-lint on save
      vim.api.nvim_create_autocmd("BufWritePost", {
        callback = function()
          lint.try_lint()
        end,
      })
    end,
  },
}

